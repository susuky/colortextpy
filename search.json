[
  {
    "objectID": "colorizer.html",
    "href": "colorizer.html",
    "title": "Colorizer",
    "section": "",
    "text": "Fore: foreground\nBack: background\nstyle: font style\n\n\nsource\n\nSystemStream\n\n SystemStream ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nAnsiColorizer\n\n AnsiColorizer ()\n\nFor text parameter, you can add color tag. Start with &lt;tag&gt; end with &lt;/tag&gt;.\nSome usage:\n    text = 'something'\n\n    # 1. blue text tag: \n\n        f'&lt;blue&gt;{text}&lt;/fg&gt;'\n        f'&lt;blue&gt;{text}&lt;/blue&gt;'\n\n    # 2. specify fg:\n        f'&lt;fg red&gt;{text}&lt;/fg&gt;'\n\n    # 3. specify bg:\n        f'&lt;bg purple&gt;{text}&lt;/bg&gt;'\n\n    # 4. style:\n        f'&lt;bold&gt;{text}&lt;/bold&gt;'\n\n    # 5. support rgb format:\n        f'&lt;255, 255, 255&gt;{text}&lt;/fg&gt;'\n        f'&lt;fg 255, 255, 255&gt;{text}&lt;/fg&gt;'\n        f'&lt;bg 255, 255, 255&gt;{text}&lt;/bg&gt;'\n\n    # 6. support hex format:\n        f'&lt;#FFFFFF&gt;{text}&lt;/fg&gt;'\n        f'&lt;fg #FFFFFF&gt;{text}&lt;/fg&gt;'\n        f'&lt;bg #FFFFFF&gt;{text}&lt;/bg&gt;'\n\n    # 7. support 8-bits color:\n        f'&lt;50&gt;{text}&lt;/fg&gt;'\n        f'&lt;fg 50&gt;{text}&lt;/fg&gt;'\n        f'&lt;bg 50&gt;{text}&lt;/bg&gt;'\n\n    # 8. mix of above is ok:\n        f'&lt;fg red&gt;{text}--&lt;bg green&gt;{text}--&lt;/fg&gt;{text}--&lt;/bg&gt;{text}'\nHere is the sample usage:\n\ntext = 'something'\ntext_w_tag = f'{text}-&lt;fg red&gt;&lt;bg #f0ffff&gt;{text}&lt;/fg&gt;&lt;/bg&gt;-{text}'\nprint(colorize(text_w_tag))\n\n\nAnd some other complex uasge:\n\n\nCode\ntest_strings = ('one', 'two', 'three', 'four', 'five')\ntest_templates = [\n    '{0}',\n    '&lt;blue&gt;{0}&lt;/fg&gt;',\n    '&lt;red&gt;{0}&lt;/red&gt;--&lt;bg green&gt;{1}&lt;/bg green&gt;',\n    '{0}--&lt;red&gt;{1}&lt;/red&gt;--&lt;fg red&gt;&lt;bg green&gt;{2}&lt;/bg&gt;--{3}&lt;/fg&gt;',\n    '{0}--&lt;50&gt;{1}&lt;/fg&gt;--&lt;fg 155&gt;&lt;bg 78&gt;{2}&lt;/bg&gt;&lt;/fg&gt;',\n    '&lt;bold&gt;{0}--&lt;fg 180, 46, 78&gt;{1}&lt;/fg&gt;&lt;/bold&gt;--&lt;bg 152, 167, 52&gt;{2}&lt;/bg&gt;',\n    '&lt;underline&gt;{0}--&lt;180, 46, 78&gt;{1}&lt;/fg&gt;--&lt;bold&gt;{1}--&lt;bg 152, 167, 52&gt;{2}&lt;/underline&gt;--{3}&lt;/bold&gt;--{4}&lt;/bg&gt;',\n    '&lt;bg #59FFAE&gt;{0}--&lt;#AAAA00&gt;{1}--&lt;/bg&gt;{2}&lt;/fg&gt;--{3}',\n]\n\nfor template in test_templates:\n    print(colorize(template.format(*test_strings)))\n\n\n\ncolorize also integrates with AnsiColor:\n\nprint(colorize('something1', fore=5, back='#ffeeaa', style='bold'))\nprint(colorize('something2', fore='r', back='y', style='underline'))\n\n\n\nsource\n\n\nColorStream\n\n ColorStream (fore=None, back=None, style=None, autoreset=True,\n              filename=None, streams='stdout')\n\nEnables context managers to work as decorators to colorize the sys.stdout or sys.stderr\nSome usage:\n    with ColorStream(fore='red'):\n        print('text')        \n\n    @ColorStream(fore=Fore.dark_orange)\n    def foo():\n        print('FOO')\n\nwith ColorStream(fore='#ff0000', back='(10, 25, 119)'):\n    print('#ff0000')\n    print('#ff0000', file=sys.stderr)\n    \n\nwith ColorStream(fore=50, back='(10, 25, 119)', streams='stderr'):\n    print('50')\n    print('50', file=sys.stderr)\n\n\n\nwith ColorStream(fore=Fore.dark_violet, autoreset=False):\n    print('autoreset off, affect next text')\n    with ColorStream(back=Back.light_green, style=(Style.underline, Style.bold)):\n        print('add background, underline, bold and autoreset')\n        with ColorStream(fore='red'):\n            print('Due to autoreset above, It only have red color')\nprint('Already leave context, show default color')\n\n\n\n@ColorStream(fore=Fore.dark_orange)\ndef foo():\n    print('dark_orange')\n    print('It would not affect sys.stderr', file=sys.stderr)\n\nfoo()\n\n\nIt could also output color text to text file:\n\nwith ColorStream(fore=Fore.blueviolet, filename='test_Colorstream.txt'):\n    print('test_Colorstream: ')\n    print('It would print blueviolet texts, and write the text to test_Colorstream.txt')\n    \n!cat test_Colorstream.txt"
  },
  {
    "objectID": "color.html",
    "href": "color.html",
    "title": "color",
    "section": "",
    "text": "source\n\nColor\n\n Color (value, names=None, module=None, qualname=None, type=None, start=1)\n\nUse enum.Enum to store color with hex, rgb, bgr format.\n\nColor.red.name, Color.red.hex, Color.red.rgb\n\n('red', '#ff0000', (255, 0, 0))\n\n\nHere are Color.available:\n\n\nCode\ndef _get_background(color):\n    background = (\n        Back['75, 70, 75'] \n        if sum(Color[color].rgb) / 3 &gt; 165 else \n        Back['240, 250, 250']\n    )\n    return background\n\n\nfor i, c in enumerate(Fore.available):\n    background = _get_background(c)\n    print(background, end='')\n    end = '\\n' if (i+1) % 4 == 0 else '\\t'\n    print(f'{Fore[c]}{c:21s}{Fore.reset}', end=end)\nprint(Back.reset_all)\n\n\n\nYou can also use it with matplotlib.pyplot:\n\nplt.plot(range(5), color=Color.red.hex)\n\n\n\n\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Examples\n  else: warn(msg)\n\nsource\n\n\nrgb2hex\n\n rgb2hex (r:int, g:int, b:int)\n\nconvert rgb color to hex\n\nrgb = (255, 255, 255)\nrgb2hex(*rgb), rgb2hex(43, 159, 225)\n\n('#ffffff', '#2b9fe1')\n\n\n\nsource\n\n\nhex2rgb\n\n hex2rgb (h:str)\n\nconvert hex color to rgb tuple\n\nhex2rgb('#ffffff'), hex2rgb('#1af1eb')\n\n((255, 255, 255), (26, 241, 235))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "colortextpy",
    "section": "",
    "text": "Tested on python 3.6-3.11, win11, win11 WSL2, Ubuntu\nIt doesn’t support win32\npip install colortextpy"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "colortextpy",
    "section": "",
    "text": "Tested on python 3.6-3.11, win11, win11 WSL2, Ubuntu\nIt doesn’t support win32\npip install colortextpy"
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "colortextpy",
    "section": "Usage",
    "text": "Usage\n\nColor printer\n\nfrom colortextpy import Printer, colorprint\n\nPrinter.blue_print('blue')\nPrinter.blue_print('blue', bold=True)\n\ncolorprint('default')\ncolorprint('#ff3567', color='#ff3567')\ncolorprint('#123456', color=Fore['#123456'])\ncolorprint(4, color=4)\ncolorprint(137, color=Fore['137'])\ncolorprint('(50, 234, 33)', color=(50, 234, 33))\ncolorprint('(50, 24, 133)', color='(50, 24, 133)')\ncolorprint('dark_green', color=Fore.dark_green)\n\ncolorprint('violet', background='violet', bold=False)\ncolorprint('violet', background='violet', bold=True)\ncolorprint('violet', color=Fore.green, background='violet', bold=True)\n\n\nUse Printer.available to see other color printers\n\n\nFore, Back, Style\n\nfrom colortextpy import Fore, Back, Style, AnsiColor, RESET_ALL\n\nFore, Back, Style\n\n(&lt;AnsiColor: 'FORE'&gt;, &lt;AnsiColor: 'BACK'&gt;, &lt;AnsiColor: 'STYLE'&gt;)\n\n\nYou could use Style to get style ansi escape code:\n\nprint(f'{Style[\"bold\"]+Style.underline}bold + underline{Style.end}')\nStyle['bold'], Style.underline\n\n\nOther style see Style.availble, but bold, underline would be the most used\nYou could use Fore and Back to get the text foreground and background ansi escape code:\n\nFore['red'], Fore.black, Back.chocolate, Back['hotpink']\n\n('\\x1b[38;2;255;0;0m',\n '\\x1b[38;2;0;0;0m',\n '\\x1b[48;2;210;105;30m',\n '\\x1b[48;2;255;105;180m')\n\n\nBoth Fore and Back could also support 8-bits, hex, rgb color.\n\nFore[50], Fore['#ffffff'], Fore['123, 45, 67']\n\n('\\x1b[38;5;50m', '\\x1b[38;2;255;255;255m', '\\x1b[38;2;123;45;67m')\n\n\n\nBack['144'], Back['#123456'], Back['(55, 244, 31)']\n\n('\\x1b[48;5;144m', '\\x1b[48;2;18;52;86m', '\\x1b[48;2;55;244;31m')\n\n\nHere’s demo of supported 8-bits colors:\n\n\nCode\nfor i in range(256):\n    end = '\\n' if (i+1)%8 == 0 else ' '*2\n    print(f'{i:3}: {Back[i]}           {Back.reset}', end=end)\n\n\n\nOther available colors are in Fore.availble and Back.available\nYou could combine Fore, Back, Style to colorize your output:\n\ntext = 'something123'\nprint(Fore[50] + text + Fore.reset)\nprint(Back['black'] + Fore.aliceblue + Style.underline + text)\n\n\ncolortextpy also provides AnsiColor api to combine Fore, Back and Style together.\n\nsource\n\n\nAnsiColor\n\n AnsiColor (fore:str=None, back:str=None, style:str=None)\n\nIntegrate with Fore, Back, Style.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfore\nstr\nNone\nForeground color. Could be hex, rgb string or tuple, Fore, 8-bits color\n\n\nback\nstr\nNone\nBackground color, Could be hex, rgb string or tuple, Back, 8-bits color\n\n\nstyle\nstr\nNone\nText style. Seee Style.available.\n\n\n\n\nansi = AnsiColor(fore='#0c0caa', back='aliceblue', style='underline')\nprint(ansi.ansi_fmt + '123456789' + RESET_ALL)\n\n\nansi = AnsiColor(fore=Fore['123, 234, 56'], back=(20, 29, 12), style=('bold', 'underline'))\nprint(ansi.ansi_fmt + '123' + RESET_ALL)\nansi.fore, ansi.back, ansi.style, ansi.ansi_fmt\n\n\nWithout setting any color, AnsiColor would give emtpy string:\n\nAnsiColor().ansi_fmt\n\n''\n\n\n\n\nColorStream\nEnables context managers to work as decorators to colorize the sys.stdout or sys.stderr\nSome usage:\n    with ColorStream(fore='red'):\n        print('text')        \n\n    @ColorStream(fore=Fore.dark_orange)\n    def foo():\n        print('FOO')\n\nwith ColorStream(fore=Fore.dark_violet, autoreset=False):\n    print('autoreset off, affect next text')\n    with ColorStream(back=Back.light_green, style=(Style.underline, Style.bold)):\n        print('add background, underline, bold and autoreset')\n        with ColorStream(fore='red'):\n            print('Due to autoreset above, It only have red color')\nprint('Already leave context, show default color')\n\n\n\n@ColorStream(fore=Fore.dark_cyan)\ndef foo():\n    print('dark_cyan')\n    print('colortextpy')\n\nfoo()\n\n\n\n\ncolorize\nyou can add color tag. Start with &lt;tag&gt; end with &lt;/tag&gt;.\nSome usage:\n\ntext = 'something'\ntext_w_tag = f'{text}-&lt;fg red&gt;&lt;bg #f0ffff&gt;{text}&lt;/fg&gt;&lt;/bg&gt;-{text}'\nprint(colorize(text_w_tag))\n\n\nAnd some other &lt;tag&gt; complex uasge:\n\n\nCode\ntest_strings = ('one', 'two', 'three', 'four', 'five')\ntest_templates = [\n    '{0}',\n    '&lt;blue&gt;{0}&lt;/fg&gt;',\n    '&lt;red&gt;{0}&lt;/red&gt;--&lt;bg green&gt;{1}&lt;/bg green&gt;',\n    '{0}--&lt;red&gt;{1}&lt;/red&gt;--&lt;fg red&gt;&lt;bg green&gt;{2}&lt;/bg&gt;--{3}&lt;/fg&gt;',\n    '{0}--&lt;50&gt;{1}&lt;/fg&gt;--&lt;fg 155&gt;&lt;bg 78&gt;{2}&lt;/bg&gt;&lt;/fg&gt;',\n    '&lt;bold&gt;{0}--&lt;fg 180, 46, 78&gt;{1}&lt;/fg&gt;&lt;/bold&gt;--&lt;bg 152, 167, 52&gt;{2}&lt;/bg&gt;',\n    '&lt;underline&gt;{0}--&lt;180, 46, 78&gt;{1}&lt;/fg&gt;--&lt;bold&gt;{1}--&lt;bg 152, 167, 52&gt;{2}&lt;/underline&gt;--{3}&lt;/bold&gt;--{4}&lt;/bg&gt;',\n    '&lt;bg #59FFAE&gt;{0}--&lt;#AAAA00&gt;{1}--&lt;/bg&gt;{2}&lt;/fg&gt;--{3}',\n]\n\nfor template in test_templates:\n    print(colorize(template.format(*test_strings)))\n\n\n\ncolorize also integrates with AnsiColor:\n\nprint(colorize('something1', fore=5, back='#ffeeaa', style='bold'))\nprint(colorize('something2', fore='r', back='y', style='underline'))\n\n\n\n\nColor\nSome Constant of color with hex, rgb, bgr format\n\nColor.red.name, Color.red.hex, Color.red.rgb, Color['red']\n\n('red', '#ff0000', (255, 0, 0), &lt;Color.red&gt;)\n\n\nYou could also pass the hex constant from Color into matplotlib.pyplot:\n\nplt.plot(np.sin(np.linspace(-4, 4, 50)), color=Color.red.hex)\n\n\n\n\nHere are other colors in Color.available :"
  },
  {
    "objectID": "index.html#friendly-reminder",
    "href": "index.html#friendly-reminder",
    "title": "colortextpy",
    "section": "Friendly Reminder",
    "text": "Friendly Reminder\nIf you use custom terminal, you might need to change terminal setting to support rgb color.\nTake SecureCRT as an example:\nOptions -&gt; Edit Default Session -&gt; Terminal -&gt; Emulation\nChange ColorMode to True Color\nTick the checkbox 'Use color scheme'"
  },
  {
    "objectID": "printer.html",
    "href": "printer.html",
    "title": "Printer",
    "section": "",
    "text": "colorprint('violet text', color=Fore.violet)\ncolorprint('brown text', color='brown', bold=True)\n\nPrinter.blue_print('blue text') # output blue text  \nPrinter.red_print('red text', bold=True)   # output bold red text\nPrinter.cyan_print('cyan text', file=sys.stderr) # output cyan text to sys.stderr\n\n\nPrinter\nHere are some example printer:\n\n\n\nblue_print\n\n blue_print (*value, bold=False, sep=' ', end='\\n', file=&lt;_io.StringIO\n             object at 0x7fd6cd0ae160&gt;, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default with Fore.blue color.\n\n\n\nviolet_print\n\n violet_print (*value, bold=False, sep=' ', end='\\n', file=&lt;_io.StringIO\n               object at 0x7fd6cd0ae160&gt;, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default with Fore.violet color.\n\n\n\nyellow_print\n\n yellow_print (*value, bold=False, sep=' ', end='\\n', file=&lt;_io.StringIO\n               object at 0x7fd6cd0ae160&gt;, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default with Fore.yellow color.\nHere are other available printers:\n\n\nCode\ndef _get_background(name):\n    color = name[:-6]\n    background = (\n        Back['75, 70, 75'] \n        if sum(Color[color].rgb) / 3 &gt; 165 else \n        Back['240, 250, 250']\n    )\n    return background\n\n\nfor i, printer in enumerate(Printer.available, 1):\n    end = '\\n' if i%3 == 0 else '\\t'\n    background = _get_background(printer)\n    print(background, end='')\n    getattr(Printer, printer)(f'{printer:28}', bold=True, end=end)\n\n\n\n\nsource\n\n\ncolorprint\n\n colorprint (*value, color=None, background=None, bold=False, sep=' ',\n             end='\\n', file=&lt;_io.StringIO object at 0x7fd6cd0ae160&gt;,\n             flush=False)\n\nPrints the values to a stream, or to sys.stdout by default with Fore.color color.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvalue\n\n\n\n\n\ncolor\nNoneType\nNone\nText color. Acceptable format: ‘red’, Fore.red, ‘#ff0000’, (255, 0, 0)\n\n\nbackground\nNoneType\nNone\nbackground color. Acceptable format: ‘red’, Back.red, ‘#ff0000’, (255, 0, 0)\n\n\nbold\nbool\nFalse\nWhether to use bold font\n\n\nsep\nstr\n\nString inserted between values, default a space.\n\n\nend\nstr\n\nString appended after the last value, default a newline.\n\n\nfile\nStringIO\n&lt;_io.StringIO object at 0x7fd6cd0ae160&gt;\nA file-like object (stream); defaults to the current sys.stdout.\n\n\nflush\nbool\nFalse\nWhether to forcibly flush the stream.\n\n\n\n\ncolorprint('default')\ncolorprint('#ff3567', color='#ff3567')\ncolorprint('#123456', color=Fore['#123456'])\ncolorprint(4, color=4)\ncolorprint(137, color=Fore['137'])\ncolorprint('(50, 234, 33)', color=(50, 234, 33))\ncolorprint('(50, 24, 133)', color='(50, 24, 133)')\ncolorprint('dark_green', color=Fore.dark_green)\n\ncolorprint('violet', background='violet', bold=False)\ncolorprint('violet', background='violet', bold=True)\ncolorprint('violet', color=Fore.green, background='violet', bold=True)"
  },
  {
    "objectID": "ansicolor.html",
    "href": "ansicolor.html",
    "title": "ansicolor",
    "section": "",
    "text": "Fore: foreground\nBack: background\nStyle: font style\n\nBasic usage:\nFore['red'], Fore.blue\nBack['yellow'], Back.black\nStyle['bold'], Style.underline\nFore and Back also suport rgb and hex format:\nFore['123, 242, 5'], Fore['(123, 242, 5)'], Fore['#ffffff']\nBack['123, 242, 5'], Back['(123, 242, 5)'], Back['#ffffff']\n\nsource\n\n_AnsiColor\n\n _AnsiColor (name='fore')\n\nname: style, fore, back\nYou could use Fore, Back and Style to get the text foreground, background and style ansi escape code. If the input is not accepted, they would return empty string ''\nSome ansi escape code example:\n\nFore.aliceblue, Back.blue, Style.bold\n\n('\\x1b[38;2;240;248;255m', '\\x1b[48;2;0;0;255m', '\\x1b[01m')\n\n\nOnly Back and Style support uppercase.\n\nFore.BLACK, Back.BLACK, Style['BOLD']\n\n('', '\\x1b[48;2;0;0;0m', '\\x1b[01m')\n\n\n\n\n\nFore\nBasic usage:\n\nFore['red'], Fore.blue\n\n('\\x1b[38;2;255;0;0m', '\\x1b[38;2;0;0;255m')\n\n\nOther available colors are in Fore.available:\n\n\nCode\ndef _get_background(color):\n    background = (\n        Back['75, 70, 75'] \n        if sum(Color[color].rgb) / 3 &gt; 165 else \n        Back['240, 250, 250']\n    )\n    return background\n\n\nfor i, c in enumerate(Fore.available):\n    background = _get_background(c)\n    print(background, end='')\n    end = '\\n' if (i+1) % 4 == 0 else '\\t'\n    print(f'{Fore[c]}{c:21s}{Fore.reset}', end=end)\nprint(Back.reset_all)\n\n\n\nFore also support rgb and hex format:\n\nFore['(1, 2, 3)'], Fore['#ffffff'], Fore((111, 222, 55))\n\n('\\x1b[38;2;1;2;3m', '\\x1b[38;2;255;255;255m', '\\x1b[38;2;111;222;55m')\n\n\n\nprint(Fore['55, 244, 56'] + 'Foreground: rgb(55, 244, 56)' + Fore.reset)\nprint(Fore['#005000'] + 'Foreground: #005000' + Fore.reset)\n\n\n\n\n\nBack\nBasic usage:\n\nBack['red'], Back.blue\n\n('\\x1b[48;2;255;0;0m', '\\x1b[48;2;0;0;255m')\n\n\nOther available colors are in Back.available:\n\n\nCode\ndef _get_foreground(color):\n    foreground = (\n        Fore['5, 7, 7'] \n        if sum(Color[color].rgb) / 3 &gt; 160 else \n        Fore['255, 250, 250']\n    )\n    return foreground\n\nfor i, c in enumerate(Back.available):\n    foreground = _get_foreground(c)\n    print(foreground, end='')\n    end = '\\n' if (i+1) % 4 == 0 else '\\t'\n    print(f'{Back[c]}{c:21s}{Back.reset}', end=end)\nprint(Fore.reset)\n\n\n\nBack also support rgb and hex format:\n\nBack['(1, 2, 3)'], Back['#ffffff'], Back((111, 222, 55))\n\n('\\x1b[48;2;1;2;3m', '\\x1b[48;2;255;255;255m', '\\x1b[48;2;111;222;55m')\n\n\n\nprint(Back['55, 244, 56'] + 'Background: rgb(55, 244, 56)' + Fore.reset)\nprint(Back['#ff5000'] + 'Background: #ff5000' + Fore.reset)\n\n\nFore and Back also support 8-bits color:\n\n\nCode\nfor i in range(256):\n    end = '\\n' if (i+1)%8 == 0 else ' '*2\n    print(f'{i:3}: {Back[i]}          {Back.reset}', end=end)\n\n\n\n\n\n\nStyle\nBasic usage:\n\nStyle['bold'], Style.underline\n\n('\\x1b[01m', '\\x1b[04m')\n\n\nOnly list the commonly used styles\n\n“reset_all” and “end” would reset all the ansi escape code function\n\nsource\n\n\nAnsiColor\n\n AnsiColor (fore:str=None, back:str=None, style:str=None)\n\nIntegrate with Fore, Back, Style.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfore\nstr\nNone\nForeground color. Could be hex, rgb string or tuple, Fore, 8-bits color\n\n\nback\nstr\nNone\nBackground color, Could be hex, rgb string or tuple, Back, 8-bits color\n\n\nstyle\nstr\nNone\nText style. Seee Style.available.\n\n\n\nBasic usage:\n\n# #| output: false\nansi_fmt = AnsiColor(fore='#ccccff', back=Back['red'], style='bold').ansi_fmt\nprint(repr(ansi_fmt))\nprint(ansi_fmt + 'something123')\n\n\n\n# #| output: false\nansi_fmt = AnsiColor(fore=Fore.antiquewhite, back=Back['(2, 2, 2)'], style='bold').ansi_fmt\nprint(repr(ansi_fmt))\nprint(ansi_fmt + 'something123')\n\n\n\nansi = AnsiColor(fore=Fore['56, 12, 34'], back=(78, 90, 120), style=('bold', 'underline'))\nansi.fore, ansi.back, ansi.style\n\n('\\x1b[38;2;56;12;34m', '\\x1b[48;2;78;90;120m', '\\x1b[01m\\x1b[04m')\n\n\n\nansi = AnsiColor(fore='108', back=177)\nansi.fore, ansi.back\n\n('\\x1b[38;5;108m', '\\x1b[48;5;177m')"
  }
]